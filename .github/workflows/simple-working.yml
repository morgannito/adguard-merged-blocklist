name: Simple Working Update

on:
  schedule:
    - cron: '0 6 * * *'
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - run: npm install axios
    
    - name: Generate blocklist
      run: |
        node -e "
        const axios = require('axios');
        const fs = require('fs');
        
        const sources = [
          // AdGuard Official Filters
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_1.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_2.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_8.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_9.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_10.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_11.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_12.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_18.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_23.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_30.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_31.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_39.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_42.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_44.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_50.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_52.txt',
          'https://adguardteam.github.io/HostlistsRegistry/assets/filter_54.txt',
          
          // Gaming Protection
          'https://raw.githubusercontent.com/Mafraysse/AdGuard_GameList-Filter/main/AdGuard_games_list.txt',
          
          // Security & Threat Protection
          'https://blocklistproject.github.io/Lists/adguard/drugs-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/crypto-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/fraud-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/gambling-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/malware-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/phishing-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/piracy-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/porn-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/ransomware-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/scam-ags.txt',
          'https://blocklistproject.github.io/Lists/adguard/torrent-ags.txt',
          
          // Comprehensive Community Lists
          'https://abp.oisd.nl/',
          'https://raw.githubusercontent.com/hagezi/dns-blocklists/refs/heads/main/adblock/ultimate.txt'
        ];
        
        async function fetch(url) {
          try {
            console.log('Fetching:', url);
            const res = await axios.get(url, {timeout: 60000});
            return {url, content: res.data, ok: true};
          } catch (e) {
            console.log('Failed:', url);
            return {url, content: '', ok: false};
          }
        }
        
        (async () => {
          const results = await Promise.all(sources.map(fetch));
          const good = results.filter(r => r.ok);
          
          console.log('Success:', good.length, 'Failed:', results.length - good.length);
          
          let output = '! AdGuard Comprehensive Blocklist\n';
          output += '! Generated: ' + new Date().toISOString() + '\n';
          output += '! Sources: ' + good.length + '\n!\n';
          
          const seen = new Set();
          let total = 0;
          
          for (const r of good) {
            output += '\n! Source: ' + r.url + '\n';
            const lines = r.content.split('\n');
            
            for (const line of lines) {
              const clean = line.trim();
              if (clean && !seen.has(clean)) {
                seen.add(clean);
                output += clean + '\n';
                total++;
              }
            }
          }
          
          fs.writeFileSync('merged-blocklist.txt', output);
          
          // Create compressed version for large file handling
          const zlib = require('zlib');
          const compressed = zlib.gzipSync(output);
          fs.writeFileSync('merged-blocklist.txt.gz', compressed);
          
          const stats = {
            lastUpdate: new Date().toISOString(),
            totalLines: total,
            ruleLines: total - 20,
            fileSize: Math.round(output.length / 1024) + 'KB',
            compressedSize: Math.round(compressed.length / 1024) + 'KB',
            sources: good.length,
            compressionRatio: Math.round((1 - compressed.length / output.length) * 100) + '%'
          };
          
          fs.writeFileSync('stats.json', JSON.stringify(stats, null, 2));
          
          // Create category-specific files for smaller downloads
          const categories = {
            'adguard-official.txt': good.filter(r => r.url.includes('HostlistsRegistry')),
            'security-threats.txt': good.filter(r => r.url.includes('blocklistproject')),
            'comprehensive.txt': good.filter(r => r.url.includes('oisd.nl') || r.url.includes('hagezi')),
            'gaming.txt': good.filter(r => r.url.includes('GameList'))
          };
          
          for (const [filename, sources] of Object.entries(categories)) {
            if (sources.length > 0) {
              let catOutput = '! ' + filename.replace('.txt', '').toUpperCase() + ' Category\\n';
              catOutput += '! Generated: ' + new Date().toISOString() + '\\n!\\n';
              
              const catSeen = new Set();
              for (const r of sources) {
                catOutput += '\\n! Source: ' + r.url + '\\n';
                const lines = r.content.split('\\n');
                for (const line of lines) {
                  const clean = line.trim();
                  if (clean && !catSeen.has(clean)) {
                    catSeen.add(clean);
                    catOutput += clean + '\\n';
                  }
                }
              }
              fs.writeFileSync(filename, catOutput);
            }
          }
          
          console.log('Complete! Total rules:', total, 'Size:', stats.fileSize, 'Compressed:', stats.compressedSize);
        })().catch(e => {
          console.error('Error:', e.message);
          process.exit(1);
        });
        "
    
    - name: Commit
      run: |
        git config user.name "GitHub Action"
        git config user.email "action@github.com"
        git add merged-blocklist.txt merged-blocklist.txt.gz *.txt stats.json
        
        if ! git diff --staged --quiet; then
          git commit -m "ðŸ¤– Auto-update $(date -u '+%Y-%m-%d %H:%M UTC')"
          git push
          echo "Pushed changes"
        else
          echo "No changes"
        fi